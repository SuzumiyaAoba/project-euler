module Euler2 where

import Prelude

import Data.Foldable (sum)
import Data.Int (even)
import Data.Lazy (defer)
import Data.List.Lazy (List(..), Step(..), filter, takeWhile)
import Data.Ord (greaterThan)

-- | Even Fibonacci Numbers
-- |
-- | Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 0 and 1, the first 10 terms will be:
-- |
-- | 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
-- |
-- | By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
-- |
-- | https://projecteuler.net/problem=2

fibs :: List Int
fibs = fibs' 0 1
  where
    fibs' :: Int -> Int -> List Int
    fibs' a b =
      List $ defer \_ ->
        Cons a $ fibs' b (a + b)

answer :: Unit -> String
answer _ = show $ sum $ takeWhile (greaterThan 4000000) (filter even fibs)